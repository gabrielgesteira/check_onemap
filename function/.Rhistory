View(teste$CC)
feijao = read_mapmaker(file = file)
twopts = rf_2pts(feijao, LOD = suggest_lod(feijao), max.rf = 0.5)
View(twopts$analysis)
teste$CC[which(is.na(teste$CC))] <- 0
View(teste$CC)
View(twopts$analysis)
test1 = twopts$analysis - teste$CC
dim(teste$CC)
dim(twopts$analysis)
View(teste$CC)
teste$CC = teste$CC[-c(253,254), -c(253,254)]
dim(teste$CC)
dim(twopts$analysis)
test1 = twopts$analysis - teste$CC
View(test1)
gl1 = make_seq(teste)
View(check_onemap)
View(check_onemap)
source("functions_new.R")
file = "onemap_example_riself.raw"
cross = ril # ril, bc, outcross
nround=6
teste = check_onemap(file, nround = 6)
View(teste$CC)
teste$CC = teste$CC[-c(253,254), -c(253,254)]
View(check_onemap)
dim(teste$CC)
library(onemap)
onemap_data = read_onemap(inputfile = file)
twopts = rf_2pts(onemap_data, LOD = suggest_lod(onemap_data), max.rf = 0.5)
dim(twopts$analysis)
source("functions_new.R")
source("functions_new.R")
teste = check_onemap(file = "onemap_example_riself.raw", nround = 6)
teste$DIFF
View(teste$DIFF)
source("functions.R")
View(check_onemap)
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
source("functions.R")
View(check_onemap)
source("functions.R")
cross = "ril"
cross == "ril"
View(check_onemap)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(teste$DIFF)
View(check_onemap)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
file = "onemap_example_riself.raw"
cross = "ril"
nround = 6
data = read.table(file, skip = 3) # Only considering Onemap files
data = as.matrix(data)
nmarkers = nrow(data)
check_twopts = rf_estimate(data, nmarkers, nround)
cross_ril = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(2*(n1+n4))
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(2*n1)
} else {r=0}
return(r)
}
cross_bc = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(n1+n2+n3+n4)
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(n1)
} else {r=0}
return(r)
}
data_p = as.matrix(data)
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
if (cross == "ril"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
} else
]
if (cross == "ril"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
} else
}
if (cross == "ril"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
} else if (cross == "bc"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_bc(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
}
analysis.check[] <- lapply(analysis.check,round,nround)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
file = "onemap_example_riself.raw"
cross = "ril"
nround = 6
data = read.table(file, skip = 3) # Only considering Onemap files
data = as.matrix(data)
nmarkers = nrow(data)
cross_ril = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(2*(n1+n4))
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(2*n1)
} else {r=0}
return(r)
}
cross_bc = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(n1+n2+n3+n4)
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(n1)
} else {r=0}
return(r)
}
data_p = as.matrix(data)
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
if (cross == "ril"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
} else if (cross == "bc"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_bc(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
}
analysis.check[] <- lapply(analysis.check,round,nround)
check_twopts = analysis.check
check_twopts$CC[which(check_twopts$CC > 0.5)] <- 0.5
check_twopts$CC[which(is.na(check_twopts$CC))] <- 0
library(onemap)
onemap_data = read_onemap(inputfile = file)
twopts = rf_2pts(onemap_data, LOD = suggest_lod(onemap_data), max.rf = 0.5)
check_twopts$'DIFF' <- twopts$analysis - check_twopts$CC
source('~/Downloads/check_onemap/RIL/check_onemap.R', echo=TRUE)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
file = "onemap_example_riself.raw"
cross = "ril"
nround = 6
cross_ril = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(2*(n1+n4))
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(2*n1)
} else {r=0}
return(r)
}
cross_bc = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(n1+n2+n3+n4)
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(n1)
} else {r=0}
return(r)
}
rf_estimate = function(data, cross, nmarkers, nround = 6){
data_p = as.matrix(data)
# Creating list for results
CC <- matrix(NA,nmarkers,nmarkers)
#  rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
if (cross == "ril"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
} else if (cross == "bc"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_bc(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
}
analysis.check[] <- lapply(analysis.check,round,nround)
return(analysis.check)
}
data = read.table(file, skip = 3) # Only considering Onemap files
data = as.matrix(data)
nmarkers = nrow(data)
check_twopts = rf_estimate(data, nmarkers, nround)
check_twopts$CC[which(check_twopts$CC > 0.5)] <- 0.5
check_twopts$CC[which(is.na(check_twopts$CC))] <- 0
library(onemap)
onemap_data = read_onemap(inputfile = file)
twopts = rf_2pts(onemap_data, LOD = suggest_lod(onemap_data), max.rf = 0.5)
check_twopts$'DIFF' <- twopts$analysis - check_twopts$CC
dim(twopts$analysis)
dim(check_twopts$CC)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
View(check_onemap)
file = "onemap_example_riself.raw"
cross = "ril"
nround = 6
data = read.table(file, skip = 3) # Only considering Onemap files
data = as.matrix(data)
nmarkers = nrow(data)
check_twopts = rf_estimate(data, nmarkers, nround)
cross_ril = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(2*(n1+n4))
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(2*n1)
} else {r=0}
return(r)
}
cross_bc = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(n1+n2+n3+n4)
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(n1)
} else {r=0}
return(r)
}
rf_estimate = function(data, cross, nmarkers, nround = 6){
data_p = as.matrix(data)
# Creating list for results
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
if (cross == "ril"){
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
}
analysis.check[] <- lapply(analysis.check,round,nround)
return(analysis.check)
}
check_twopts = rf_estimate(data, nmarkers, nround)
rf_estimate = function(data, cross, nmarkers, nround = 6){
data_p = as.matrix(data)
# Creating list for results
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
analysis.check[] <- lapply(analysis.check,round,nround)
return(analysis.check)
}
data = read.table(file, skip = 3) # Only considering Onemap files
data = as.matrix(data)
nmarkers = nrow(data)
check_twopts = rf_estimate(data, nmarkers, nround)
substr(as.vector(data_p[,1]),2,4)
data_p = as.matrix(data)
substr(as.vector(data_p[,1]),2,4)
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
nround = 6
cross = "ril"
file = "onemap_example_riself.raw"
data = read.table(file, skip = 3) # Only considering Onemap files
data = as.matrix(data)
nmarkers = nrow(data)
cross_ril = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(2*(n1+n4))
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(2*n1)
} else {r=0}
return(r)
}
cross_bc = function(data){
data = data[,!((data[1,] == "-") | (data[2,] == "-"))]
n = ncol(data)
t = table(as.data.frame(t(data)))
if (length(t) == 4){
n1 = t[1,1]
n2 = t[1,2]
n3 = t[2,1]
n4 = t[2,2]
r = (n2+n3)/(n1+n2+n3+n4)
} else if (length(t) == 2){
n1 = t[1]
n3 = t[2]
r = n3/(n1)
} else {r=0}
return(r)
}
rf_estimate = function(data, cross, nmarkers, nround = 6){
data_p = as.matrix(data)
# Creating list for results
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
analysis.check[] <- lapply(analysis.check,round,nround)
return(analysis.check)
}
check_twopts = rf_estimate(data, nmarkers, nround)
data_p = as.matrix(data)
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- substr(as.vector(data_p[,1]),2,4)
analysis.check <- list()
analysis.check$'CC' <- CC
for(i in 1:(nrow(data_p)-1)){
for (j in (i+1):nrow(data_p)){
outp = cross_ril(data_p[c(i,j),-c(1,2)])
analysis.check[[1]][i,j] <- analysis.check[[1]][j,i] <- outp#[1,1]
}
}
View(analysis.check$CC)
analysis.check[] <- lapply(analysis.check,round,nround)
check_twopts = rf_estimate(data, nmarkers, nround)
View(data)
data[,1]
CC <- matrix(NA,nmarkers,nmarkers)
rownames(CC) <- colnames(CC) <- data[,1]# substr(as.vector(data_p[,1]),2,4)
View(CC)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(check_onemap)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(teste$DIFF)
View(check_onemap)
source("functions.R")
teste = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
View(teste$DIFF)
source("functions.R")
ril = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 6)
bc = check_onemap(file = "onemap_example_bc.raw", cross = "bc", nround = 6)
bc = check_onemap(file = "onemap_example_bc.raw", cross = "bc", nround = 6)
View(ril$DIFF)
View(bc$DIFF)
View(bc$DIFF)
bc = check_onemap(file = "onemap_example_bc.raw", cross = "bc", nround = 4)
View(bc$DIFF)
bc = check_onemap(file = "onemap_example_bc.raw", cross = "bc", nround = 20)
View(bc$DIFF)
teste = round(bc$DIFF, 2)
View(teste)
View(check_onemap)
source("functions.R")
ril = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 4)
View(ril$DIFF)
bc = check_onemap(file = "onemap_example_bc.raw", cross = "bc", nround = 4)
View(bc$DIFF)
source("functions.R")
ril = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 4)
View(ril$DIFF)
bc = check_onemap(file = "onemap_example_bc.raw", cross = "bc", nround = 4)
View(bc$DIFF)
outc = check_onemap(file = "data_out.raw", cross = "outcross", nround = 4)
View(check_onemap)
source("functions.R")
ril = check_onemap(file = "onemap_example_riself.raw", cross = "ril", nround = 4)
View(ril$DIFF)
bc = check_onemap(file = "onemap_example_bc.raw", cross = "bc", nround = 4)
View(bc$DIFF)
outc = check_onemap(file = "data_out.raw", cross = "outcross", nround = 4)
View(outcross$DIFF)
View(outc$DIFF)
View(check_onemap)
View(outc$DIFF)
View(check_onemap)
outc = check_onemap(file = "data_out.raw", cross = "outcross", nround = 4)
View(outc$DIFF)
View(outc$CC)
