
#include <Rcpp.h>
#include <R_ext/PrtUtil.h>
#include "utils.h"
using namespace Rcpp
using namespace std
#define TOL 1e-06
#define LN3 1.098612288668109
#define LN4 1.38629436111989
#define LN_75 -0.28768207245178

Rcpp::NumericVector rf_A_A(Rcpp::NumericMatrix n,
			  int n_ind,
			  int mis)
# A_A
cross_11 = function(data){
  NumericVector r_8
  int n1, n2, n3, n4
  double l_0, l
  l_0=-2.0*log(2)*(n_ind)  
  n1=n(4,1)+n(3,2)+n(2,3)+n(1,4)   
  n2=n(4,4)+n(3,3)+n(2,2)+n(1,1)
  n3=n(4,3)+n(3,4)+n(2,1)+n(1,2)
  n4=n(4,2)+n(3,1)+n(2,4)+n(1,3)  
  r_0=(2.0*(n1)+n3+n4)/(2.0*(n_ind))
  l=(n3+n4)*log((1-r_0)*r_0)+2.0*(n1)*log(r_0)+2.0*(n2)*log(1-r_0)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm# 
  r_1=(2.0*(n4)+n2+n1)/(2.0*(n_ind))
  l=(n2+n1)*log((1-r_1)*r_1)+2.0*(n4)*log(r_1)+2.0*(n3)*log(1-r_1)
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)
  return(r)
}


Rcpp::NumericVector rf_A_B1(Rcpp::NumericMatrix n,
			    int n_ind,
			    int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = - (log(2) * (n(2,1)+n(1,1) + n(4,1)+n(3,1)+2*n(2,2)+2*n(1,3)) +
	  2 * log(2)*(n(4,2)+n(3,3)+n(2,3)+n(1,2)+n(4,3)+n(3,2)))
  /*EM algorithm#
  rold=0
  rnew=0.01

  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(4,1)+n(3,1)+n(2,1)+n(1,1)) +
	    2*(n(2,2)+n(1,3)) + 
	    n(4,2)+n(4,1)+n(3,3)+n(3,1)+n(2,3)+n(1,2))/(2.0*(n_ind))
    }
  r_0=rnew
  l=(n(4,2)+n(3,3)+n(2,3)+n(1,2))*log(rnew-(rnew*rnew))+(n(4,1)+n(3,1)+2*n(2,2)+2*n(1,3))*log(rnew)+(2*n(4,3)+2*n(3,2)+n(2,1)+n(1,1))*log(1-rnew)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  
  rold=0, rnew=0.01	     
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(4,1)+n(3,1)+n(2,1)+n(1,1)) + 
	    2*(n(2,3)+n(1,2))+
	    n(4,3)+n(4,1)+n(3,2)+n(3,1)+n(2,2)+n(1,3))/(2.0*(n_ind))
    }
  r_1=rnew
  l=(n(4,3)+n(3,2)+n(2,2)+n(1,3))*log(rnew-(rnew*rnew))+(n(4,1)+n(3,1)+2*n(2,3)+2*n(1,2))*log(rnew)+(2*n(4,2)+2*n(3,3)+n(2,1)+n(1,1))*log(1-rnew)
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_A_B2(Rcpp::NumericMatrix n,
			    int n_ind,
			    int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = - (log(2) * (n(2,1)+n(1,1) + n(4,1)+n(3,1)+2*n(2,2)+2*n(1,3)) +
	  2 * log(2)*(n(4,2)+n(3,3)+n(2,3)+n(1,2)+n(4,3)+n(3,2)))
  /*EM algorithm#
  rold=0
  rnew=0.01

  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(4,1)+n(3,1)+n(2,1)+n(1,1)) +
	    2*(n(3,2)+n(1,3)) + 
	    n(4,2)+n(4,1)+n(3,3)+n(2,1)+n(2,3)+n(1,2))/(2.0*(n_ind))
    }
  r_0=rnew
  l=(n(4,2)+n(3,3)+n(2,3)+n(1,2))*log(rnew-(rnew*rnew))+(n(4,1)+2*n(3,2)+n(2,1)+2*n(1,3))*log(rnew)+(2*n(4,3)+2*n(2,2)+n(3,1)+n(1,1))*log(1-rnew)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  
  rold=0, rnew=0.01	     
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(4,1)+n(3,1)+n(2,1)+n(1,1)) + 
	    2*(n(2,3)+n(4,2))+
	    n(4,3)+n(3,2)+n(3,1)+n(2,2)+n(1,3)+n(1,1))/(2.0*(n_ind))
    }
  r_1=rnew
  l=(n(4,3)+n(3,2)+n(2,2)+n(1,3))*log(rnew-(rnew*rnew))+(2*n(4,2)+n(3,1)+2*n(2,3)+n(1,1))*log(rnew)+(n(4,1)+2*n(3,3)+n(2,1)+2*n(1,2))*log(1-rnew)
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_A_B3(Rcpp::NumericMatrix n,
			    int n_ind,
			    int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0= -2.0*log(2)*(n_ind)

  /*EM algorithm#
  rold=0, rnew=0.01

  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(((n(3,2)+n(2,2))*(rold*rold))/((rold*rold)/2.0+((1-rold)*(1-rold))/2.0) + 	    
	    2.0*(n(1,3)+n(4,1))+n(3,3)+n(2,3)+n(4,2)+n(1,2)+n(3,1)+n(2,1))/(2.0*(n_ind))
    }
  r_0=rnew
  l=(n(3,2)+n(2,2))*log((2.0*(rnew*rnew)-2.0*rnew+1)/2.0)+
    (n(3,3)+n(2,3)+n(4,2)+n(1,2)+n(3,1)+n(2,1))*log(rnew-(rnew*rnew))+
    2.0*(n(1,3)+n(4,1))*log(rnew)+
    2.0*(n(4,3)+n(1,1))*log(1.0-rnew)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  
  rold=0, rnew=0.01	     
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(((n(4,2)+n(1,2))*(rold*rold))/((rold*rold)/2.0+((1-rold)*(1-rold))/2.0) + 
	    2.0*(n(2,3)+n(3,1)) + n(4,3)+n(1,3)+n(3,2)+n(2,2)+n(4,1)+n(1,1))/(2.0*(n_ind))
    }
  r_1=rnew
  l=(n(4,2)+n(1,2))*log((2.0*(rnew*rnew)-2.0*rnew+1)/2.0)+
    (n(4,3)+n(1,3)+n(3,2)+n(2,2)+n(4,1)+n(1,1))*log(rnew-(rnew*rnew))+
    2.0*(n(2,3)+n(3,1))*log(rnew)+
    2.0*(n(3,3)+n(2,1))*log(1.0-rnew)
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#

  r_2=abs(1.0-r_1)

  r_3=abs(1.0-r_0)  

  return(r)
}

Rcpp::NumericVector rf_A_C(Rcpp::NumericMatrix n,
			   int n_ind,
			   int mis)
{
  NumericVector r_8
  double l, l_0, r0, r1, r2, rnew, rold
  //Likelihoods under h0: r=0.5
  l_0=-2*log(2)*n(4,2)-(LN4-LN3)*n(4,1)-2*log(2)*(n(3,2)+n(2,2))-(LN4-LN3)*(n(3,1)+n(2,1))-2*log(2)*n(1,2)-(LN4-LN3)*n(1,1)
  //EM algorithm
  rold=0, rnew=0.01
  
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      r0=(1-rold)*(1-rold)
      r1=(1-rold)*rold
      r2=rold*rold
      rnew=((2.0*n(1,1)*r1)/(2.0*r1+r0) +
	    (n(4,1)*(2.0*r2+2.0*r1))/(r2+2.0*r1) +
	    ((n(3,1)+n(2,1))*(2.0*r2+r1))/(r2+r1+r0) + 
	    n(3,2)+n(2,2)+2.0*n(1,2))/(2.0*(n_ind))
    }
  r_0=rnew
  l=(n(3,1)+n(2,1))*log(rnew*rnew-rnew+1)+n(4,1)*log(2.0*rnew-rnew*rnew)+(n(3,2)+n(2,2))*log(rnew-rnew*rnew)+n(1,1)*log(1-rnew*rnew)+2.0*n(1,2)*log(rnew)+2.0*n(4,2)*log(1-rnew)
  r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  
  rold=0, rnew=0.01	     
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      r0=(1-rold)*(1-rold)
      r1=(1-rold)*rold
      r2=rold*rold
      rnew=((2.0*n(2,1)*r1)/(2.0*r1+r0) +
	    (n(3,1)*(2.0*r2+2.0*r1))/(r2+2.0*r1) +
	    ((n(4,1)+n(1,1))*(2.0*r2+r1))/(r2+r1+r0) + 
	    n(4,2)+2.0*n(2,2)+n(1,2))/(2.0*(n_ind))
    }
  r_1=rnew
  l=(n(4,1)+n(1,1))*log(rnew*rnew-rnew+1)+n(3,1)*log(2.0*rnew-rnew*rnew)+(n(4,2)+n(1,2))*log(rnew-rnew*rnew)+n(2,1)*log(1-rnew*rnew)+2.0*n(2,2)*log(rnew)+2.0*n(3,2)*log(1-rnew)
  r_5=r_6=(l-l_0)/log(10.0) //transforming to base 10 logarithm

  r_2=abs(1.0-r_1)

  r_3=abs(1.0-r_0)  

  return(r)
} 
Rcpp::NumericVector rf_A_D1(Rcpp::NumericMatrix n,
			   int n_ind,
			   int mis)
{
  NumericVector r_8
  double l, l_0,  rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0, rnew=0.01
  
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(4,2)+n(3,2)+n(2,1)+n(1,1))+(rold+1)*(n(4,1)+n(3,1)+n(2,2)+n(1,2)))/(2.0*(n_ind))
    }
  r_1=r_0=rnew
  l=(n(4,1)+n(3,1)+n(2,2)+n(1,2))*log(rnew)+(n(4,2)+n(3,2)+n(2,1)+n(1,1))*log(1-rnew)
  r_4=r_5=r_6=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_3=r_2=abs(1.0-r_1)
  return(r)
}
Rcpp::NumericVector rf_A_D2(Rcpp::NumericMatrix n,
			   int n_ind,
			   int mis)
{
  NumericVector r_8
  double l, l_0,  rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0, rnew=0.01
  
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(4,2)+n(3,1)+n(2,2)+n(1,1))+(rold+1)*(n(4,1)+n(3,2)+n(2,1)+n(1,2)))/(2.0*(n_ind))
    }
  r_2=r_0=rnew
  l=(n(4,1)+n(3,2)+n(2,1)+n(1,2))*log(rnew)+(n(4,2)+n(3,1)+n(2,2)+n(1,1))*log(1-rnew)
  r_4=r_5=r_6=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_3=r_1=abs(1.0-r_0)
  return(r)
}
Rcpp::NumericVector rf_B1_B1(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(2.0*n(3,3)+2.0*n(3,2)+n(3,1)+2.0*n(2,3)+2.0*n(2,2)+n(2,1)+2.0*n(1,3)+2.0*n(1,2)+n(1,1))
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,1)+n(2,1)+n(1,3)+n(1,2)+n(1,1))*rold+n(3,2)+n(3,1)+n(2,3)+n(2,1)+n(1,3)+n(1,2))/(2.0*(n_ind))
    }
  r_0=rnew
  l=((n(3,2)+n(2,3))*log(rnew-rnew*rnew)+(n(3,1)+n(2,1))*log(rnew)+(n(1,3)+n(1,2))*log(rnew/2.0)+(2.0*n(3,3)+2.0*n(2,2)+n(1,1))*log(1-rnew))
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  rold=0, rnew=0.01	     
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,1)+n(2,1)+n(1,3)+n(1,2)+n(1,1))*rold+n(3,3)+n(3,1)+n(2,2)+n(2,1)+n(1,3)+n(1,2))/(2.0*(n_ind))
    }
  r_1=rnew
  l=((n(3,3)+n(2,2))*log(rnew-rnew*rnew)+(n(3,1)+n(2,1))*log(rnew)+(n(1,3)+n(1,2))*log(rnew/2.0)+(2.0*n(3,2)+2.0*n(2,3)+n(1,1))*log(1-rnew))
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B1_B2(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(2*n(3,3)+n(2,1)+n(3,1)+2*n(2,2)+n(1,1))-2*log(2)*(n(3,2)+n(2,3)+n(1,3)+n(1,2))
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,1)+n(2,1)+n(1,3)+n(1,2)+2*n(1,1))*rold+n(3,2)+n(3,1)+n(2,3)+2.0*n(2,2)+n(1,3))/(2.0*(n_ind))
    }
  r_0=rnew
  l=(n(3,2)+n(2,3))*log(rnew-rnew*rnew)+(n(3,1)+2*n(2,2))*log(rnew)+n(1,3)*log(rnew/2.0)+n(1,2)*log(-(rnew-1.0)/2.0)+(2.0*n(3,3)+n(2,1))*log(1-rnew)-log(2)*n(1,1)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  rold=0, rnew=0.01	     
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,1)+n(2,1)+n(1,3)+n(1,2)+2*n(1,1))*rold+n(3,3)+2*n(3,2)+n(2,2)+n(2,1)+n(1,3))/(2.0*(n_ind))
    }
  r_1=rnew
  l=(n(3,3)+n(2,2))*log(rnew-rnew*rnew)+(n(2,1)+2*n(3,2))*log(rnew)+n(1,3)*log(rnew/2.0)+n(1,2)*log(-(rnew-1.0)/2.0)+(2.0*n(2,3)+n(3,1))*log(1-rnew)-log(2)*n(1,1)
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B1_B3(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(2.0*n(3,3)+n(3,2)+2.0*n(3,1)+2.0*n(2,3)+n(2,2)+2.0*n(2,1)+2.0*n(1,3)+n(1,2)+2.0*n(1,1))
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((2.0*n(1,3)+4*n(1,2)+2.0*n(1,1))*(rold*rold*rold) +
	    (2.0*n(3,2)+4*n(3,1)+2.0*n(2,3)+2.0*n(2,2)+2.0*n(2,1)-4*n(1,2)-2.0*n(1,1))*(rold*rold) +
	    (-2.0*n(3,2)-4*n(3,1)-2.0*n(2,3)-2.0*n(2,1)-n(1,3)+2.0*n(1,2)+n(1,1))*rold + 
	    n(3,2)+2.0*n(3,1)+n(2,3)+n(2,1)+n(1,3))/((2.0*rold*rold-2.0*rold+1)*2.0*(n_ind))
    }
  r_0=rnew
  l=n(2,2)*log(2.0*rnew*rnew-2.0*rnew+1)+(n(2,3)+n(2,1))*log(rnew-rnew*rnew)+n(3,2)*log(2.0*rnew-2.0*rnew*rnew)+2.0*n(3,1)*log(rnew)+n(1,3)*log(rnew/2.0)+n(1,1)*log(-(rnew-1)/2.0)+2.0*n(3,3)*log(1-rnew)-log(2)*n(1,2)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  rold=0, rnew=0.01	     


  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((2.0*n(1,3)+4*n(1,2)+2.0*n(1,1))*(rold*rold*rold) +
	    (2.0*n(3,3)+2.0*n(3,2)+2.0*n(3,1)+2.0*n(2,2)+4*n(2,1)-4*n(1,2)-2.0*n(1,1))*(rold*rold) +
	    (-2*n(3,3)-2*n(3,1)-2*n(2,2)-4*n(2,1)-n(1,3)+2*n(1,2)+n(1,1))*rold + 
	    +n(3,3)+n(3,1)+n(2,2)+2*n(2,1)+n(1,3))/((2.0*rold*rold-2.0*rold+1)*2.0*(n_ind))
    }
  r_1=rnew
  l=n(3,2)*log(2.0*rnew*rnew-2.0*rnew+1)+(n(3,3)+n(3,1))*log(rnew-rnew*rnew)+n(2,2)*log(2.0*rnew-2.0*rnew*rnew)+2.0*n(2,1)*log(rnew)+n(1,3)*log(rnew/2.0)+n(1,1)*log(-(rnew-1)/2.0)+2.0*n(2,3)*log(1-rnew)-log(2)*n(1,2)
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B1_C(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = LN_75*(n(3,1) + n(2,1) + n(1,1)) - 2.0*log(2)*(n(3,2)+n(2,2)+n(1,2))
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(1,2)+n(1,1))*rold*rold*rold*rold+
	    (n(2,2)+n(2,1)-2*n(1,2)-4*n(1,1))*rold*rold*rold+
	    (-2*n(3,1)-3*n(2,2)-n(2,1)+4*n(1,1))*rold*rold+
	    (2*n(3,1)+3*n(2,2)-2*n(2,1)+n(1,2)-3*n(1,1))*rold-2*n(3,1)-2*n(2,2)-2*n(1,2))/
	(((rold-2)*(rold*rold-rold+1))*2.0*(n_ind))
    }
  r_0=rnew
  l=n(2,1)*log(rnew*rnew-rnew+1)+
    n(3,1)*log(2*rnew-rnew*rnew)+
    n(2,2)*log(rnew-rnew*rnew)+
    n(1,2)*log(rnew/2)+
    n(1,1)*log(-(rnew-2)/2)+
    2*n(3,2)*log(1-rnew)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  rold=0, rnew=0.01	       
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(1,2)+n(1,1))*rold*rold*rold*rold+
	    (n(3,2)+n(3,1)-2*n(1,2)-4*n(1,1))*rold*rold*rold+
	    (-3*n(3,2)-n(3,1)-2*n(2,1)+4*n(1,1))*rold*rold+
	    (3*n(3,2)-2*n(3,1)+2*n(2,1)+n(1,2)-3*n(1,1))*rold-2*n(3,2)-2*n(2,1)-2*n(1,2))/
	(((rold-2)*(rold*rold-rold+1))*2.0*(n_ind))
    }
  r_1=rnew
  l=n(3,1)*log(rnew*rnew-rnew+1)+
    n(2,1)*log(2*rnew-rnew*rnew)+
    n(3,2)*log(rnew-rnew*rnew)+
    n(1,2)*log(rnew/2)+
    n(1,1)*log(-(rnew-2)/2)+
    2*n(2,2)*log(1-rnew)
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B1_D1(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(3,2)+n(3,1)+n(2,2)+n(2,1)+n(1,2)+n(1,1))+
	    n(3,1)+n(2,1)+n(1,2))/(2.0*(n_ind))
    }
  r_0=r_1=rnew
  r_2=r_3=abs(1.0-r_0)
  l=(n(3,1)+n(2,1)+n(1,2))*log(rnew)+(n(3,2)+n(2,2)+n(1,1))*log(1-rnew)
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  return(r)
}
Rcpp::NumericVector rf_B1_D2(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(rold*(n(3,2)+n(3,1)+n(2,2)+n(2,1)+2*(n(1,2)+n(1,1)))+
		 n(3,1)+n(2,2))/(2.0*(n_ind))
    }
  r_0=r_2=rnew
  r_1=r_3=abs(1.0-r_0)
  l=(n(3,1)+n(2,2))*log(rnew)+(n(3,2)+n(2,1))*log(1-rnew)-log(2)*(n(1,2) + n(1,1))
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  return(r)
}
Rcpp::NumericVector rf_B2_B2(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(2.0*n(3,3)+2.0*n(3,2)+n(3,1)+2.0*n(2,3)+2.0*n(2,2)+n(2,1)+2.0*n(1,3)+2.0*n(1,2)+n(1,1))
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,1)+n(2,1)+n(1,3)+n(1,2)+n(1,1))*rold+
	    n(3,2)+n(3,1)+n(2,3)+n(2,1)+n(1,3)+n(1,2))/(2.0*(n_ind))
    }
  r_0=rnew
  l=(n(3,2)+n(2,3))*log(rnew-rnew*rnew)+
    (n(3,1)+n(2,1))*log(rnew)+(n(1,3)+n(1,2))*log(rnew/2.0)+
    (2.0*n(3,3)+2.0*n(2,2)+n(1,1))*log(1-rnew)
  r_4=r_7=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  rold=0, rnew=0.01	     
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,1)+n(2,1)+n(1,3)+n(1,2)+n(1,1))*rold+2.0*(n(3,2)+n(2,3))+
	    n(3,3)+n(2,2)+n(1,1))/(2.0*(n_ind))
    }
  r_1=rnew
  l=((n(3,3)+n(2,2))*log(rnew-rnew*rnew)+(2.0*(n(3,2)+n(2,3))+n(1,1))*log(rnew)+(n(1,3)+n(1,2))*log(-(rnew-1)/2)+(n(3,1)+n(2,1))*log(1-rnew))
  r_5=r_6=(l-l_0)/log(10.0) /*transforming to base 10 logarithm#
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B2_B3(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(2.0*n(3,3)+n(3,2)+2.0*n(3,1)+2.0*n(2,3)+n(2,2)+2.0*n(2,1)+2.0*n(1,3)+n(1,2)+2.0*n(1,1))
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((2.0*n(1,3)+4*n(1,2)+2.0*n(1,1))*rold*rold*rold+
	    (2.0*n(3,2)+4*n(3,1)+2.0*n(2,3)+2.0*n(2,2)+2.0*n(2,1)-4*n(1,2)-2.0*n(1,1))*rold*rold+
	    (-2.0*n(3,2)-4*n(3,1)-2.0*n(2,3)-2.0*n(2,1)-n(1,3)+2.0*n(1,2)+n(1,1))*rold+
	    n(3,2)+2.0*n(3,1)+n(2,3)+n(2,1)+n(1,3))/
	(2.0*(n_ind)*(2.0*(rold*rold)-2.0*rold+1))
    }
  r_0=rnew
  l=n(2,2)*log(2*rnew*rnew-2*rnew+1)+(n(2,3)+n(2,1))*log(rnew-rnew*rnew)+n(3,2)*log(2*rnew-2*rnew*rnew)+2*n(3,1)*log(rnew)+n(1,3)*log(rnew/2)+n(1,1)*log(-(rnew-1)/2)+2*n(3,3)*log(1-rnew)-log(2)*n(1,2)

  r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  rold=0, rnew=0.01	    
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((2*n(1,3)+4*n(1,2)+2*n(1,1))*rold*rold*rold+
	    (2*n(3,3)+2*n(3,2)+2*n(3,1)+4*n(2,3)+2*n(2,2)-2*n(1,3)-4*n(1,2))*rold*rold+
	    (-2*n(3,3)-2*n(3,1)-4*n(2,3)-2*n(2,2)+n(1,3)+2*n(1,2)-n(1,1))*rold+
	    n(3,3)+n(3,1)+2*n(2,3)+n(2,2)+n(1,1))/
	(2.0*(n_ind)*(2.0*(rold*rold)-2.0*rold+1))
    }
  r_1=rnew
  l=n(3,2)*log(2*(rnew*rnew)-2*rnew+1)+
    (n(3,3)+n(3,1))*log(rnew-(rnew*rnew))+
    n(2,2)*log(2*rnew-2*(rnew*rnew))+
    2*n(2,3)*log(rnew)+n(1,1)*log(rnew/2)+
    n(1,3)*log(-(rnew-1)/2)+
    2*n(2,1)*log(1-rnew)-
    log(2)*n(1,2)
  r_5=r_6=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  

  return(r)
}
Rcpp::NumericVector rf_B2_C(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  //Likelihoods under h0: r=0.5
  l_0 = LN_75*(n(3,1) + n(2,1) + n(1,1)) - 2.0*log(2)*(n(3,2) + n(2,2) + n(1,2))
  //EM algorithm
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(1,2)+n(1,1))*rold*rold*rold*rold+
	    (n(2,2)+n(2,1)-2.0*n(1,2)-4*n(1,1))*rold*rold*rold+
	    (-2.0*n(3,1)-3*n(2,2)-n(2,1)+4*n(1,1))*rold*rold+
	    (2.0*n(3,1)+3*n(2,2)-2.0*n(2,1)+n(1,2)-3*n(1,1))*rold-
	    2.0*n(3,1)-2.0*n(2,2)-2.0*n(1,2))/(2.0*(n_ind) * (rold-2.0)*((rold*rold)-rold+1))
    }
  r_0=rnew
  l=n(2,1)*log((rnew*rnew)-rnew+1)+n(3,1)*log(2.0*rnew-(rnew*rnew))+
    n(2,2)*log(rnew-(rnew*rnew))+n(1,2)*log(rnew/2.0)+n(1,1)*log(-(rnew-2)/2)+
    2.0*n(3,2)*log(1-rnew)
    r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  rold=0, rnew=0.01	       
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(1,2)+n(1,1))*rold*rold*rold*rold+
	    (n(3,2)+n(3,1)+2.0*n(2,2)+2.0*n(2,1)+2.0*n(1,1))*rold*rold*rold+
	    (2.0*n(3,1)-2.0*n(2,1)-2.0*n(1,1))*rold*rold+
	    (n(3,1)+2.0*n(2,1)+n(1,2)+3*n(1,1))*rold+
	    n(3,2)+2.0*n(2,2))/(2.0*(n_ind) * (rold+1.0)*((rold*rold)-rold+1))
    }
  r_1=rnew
  l=n(3,1)*log(rnew*rnew-rnew+1)+
    n(3,2)*log(rnew-rnew*rnew)+
    n(2,1)*log(1-rnew*rnew)+
    n(1,1)*log((rnew+1)/2)+
    2.0*n(2,2)*log(rnew)+
    n(1,2)*log(-(rnew-1)/2.0)
  r_5=r_6=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  r_2=abs(1.0-r_1)
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B2_D1(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,2)+n(3,1)+n(2,2)+n(2,1)+2*n(1,2)+2*n(1,1))*rold+n(3,1)+n(2,2))/(2.0*(n_ind))
    }
  r_0=r_1=rnew
  r_2=r_3=abs(1.0-r_0)
  l=(n(3,1)+n(2,2))*log(rnew)+(n(3,2)+n(2,1))*log(1-rnew)-log(2)*(n(1,2)+n(1,1))
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}
Rcpp::NumericVector rf_B2_D2(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,2)+n(3,1)+n(2,2)+n(2,1)+n(1,2)+n(1,1))*rold+n(3,1)+n(2,1)+n(1,2))/(2.0*(n_ind))
    }
  r_0=r_2=rnew
  r_1=r_3=abs(1.0-r_0)
  l=(n(3,1)+n(2,1)+n(1,2))*log(rnew)+(n(3,2)+n(2,2)+n(1,1))*log(1-rnew)
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}
Rcpp::NumericVector rf_B3_B3(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  //Likelihoods under h0: r=0.5
  l_0 = -log(2)*(2*n(3,3)+n(3,2)+2*n(3,1)+2*n(2,3)+n(2,2)+2*n(2,1)+2*n(1,3)+n(1,2)+2*n(1,1))
    //EM algorithm
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((2*n(3,2)+4*n(3,1)+2*n(2,3)+2*n(2,2)+2*n(2,1)+4*n(1,3)+2*n(1,2))*rold*rold+
	    (-2*n(3,2)-4*n(3,1)-2*n(2,3)-2*n(2,1)-4*n(1,3)-2*n(1,2))*rold+
	    n(3,2)+2*n(3,1)+n(2,3)+n(2,1)+2*n(1,3)+n(1,2))/
	(2.0*(n_ind)*(2*(rold*rold)-2*rold+1))
    }
  r_0=rnew
  l=n(2,2)*log(2*(rnew*rnew)-2*rnew+1)+(n(2,3)+n(2,1))*log(rnew-(rnew*rnew))+
    (n(3,2)+n(1,2))*log(2*rnew-2*(rnew*rnew))+(2*n(3,1)+2*n(1,3))*log(rnew)+
    (2*n(3,3)+2*n(1,1))*log(1-rnew)
    r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
    rold=0, rnew=0.01	       
    while(abs(rold-rnew) > TOL)
      {
	rold=rnew
	rnew=((2*n(3,3)+2*n(3,2)+2*n(3,1)+2*n(2,3)+2*n(2,2)+2*n(2,1)+2*n(1,3)+2*n(1,2)+2*n(1,1))*rold*rold+
	      (-2*n(3,3)-2*n(3,1)-2*n(2,2)-2*n(1,3)-2*n(1,1))*rold+
	      n(3,3)+n(3,1)+n(2,2)+n(1,3)+n(1,1))/
	  (2.0*(n_ind)*(2*(rold*rold)-2*rold+1))      
      }
    r_2=r_1=rnew
    l=(n(3,2)+n(1,2))*log(2*(rnew*rnew)-2*rnew+1)+(n(2,3)+n(2,1))*log((2*(rnew*rnew)-2*rnew+1)/2)+
      (n(3,3)+n(3,1)+n(1,3)+n(1,1))*log(rnew-(rnew*rnew))+n(2,2)*log(2*rnew-2*(rnew*rnew))
  r_5=r_6=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B3_C(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  //Likelihoods under h0: r=0.5
  l_0 = LN_75*(n(3,1)+n(2,1)+n(1,1)) - 2*log(2)*(n(3,2)+n(2,2)+n(1,2))
  //EM algorithm
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(2,2)+n(2,1)+2*n(1,2)+2*n(1,1))*rold*rold*rold*rold+
	    (-2*n(3,1)-2*n(2,2)-4*n(1,2)-6*n(1,1))*rold*rold*rold+
	    (6*n(1,1)-3*n(2,1))*rold*rold+
	    (n(2,2)-2*n(2,1)+2*n(1,2)-4*n(1,1))*rold-
	    2*n(3,1)-2*n(2,2)-4*n(1,2))/
	(2.0*(n_ind)*((rold-2)*(rold+1)*((rold*rold)-rold+1)))
    }
  r_0=rnew
  l=n(2,1)*log(rnew*rnew-rnew+1)+
    n(3,1)*log(2*rnew-rnew*rnew)+
    n(2,2)*log(rnew-(rnew*rnew))+
    n(1,1)*log(1-(rnew*rnew))+
    2*n(1,2)*log(rnew)+2*n(3,2)*log(1-rnew)
  r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  rold=0, rnew=0.01	       
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((4*n(3,2)+4*n(3,1)+4*n(2,2)+4*n(2,1)+4*n(1,2)+4*n(1,1))*rold*rold*rold*rold*rold*rold+
	    (-12*n(3,2)-4*n(3,1)-8*n(2,2)-16*n(2,1)-12*n(1,2)-4*n(1,1))*rold*rold*rold*rold*rold+
	    (16*n(3,2)-4*n(3,1)+6*n(2,2)+26*n(2,1)+16*n(1,2)-4*n(1,1))*rold*rold*rold*rold+
	    (-12*n(3,2)+4*n(3,1)-2*n(2,2)-26*n(2,1)-12*n(1,2)+4*n(1,1))*rold*rold*rold+
	    (3*n(3,2)-n(3,1)-2*n(2,2)+14*n(2,1)+3*n(1,2)-n(1,1))*rold*rold+
	    (n(3,2)-n(3,1)-4*n(2,1)+n(1,2)-n(1,1))*rold-
	    n(3,2)-n(1,2))/(2*(n_ind)*((rold*rold)-rold+1)*(2*(rold*rold)-2*rold-1)*(2*(rold*rold)-2*rold+1))
    }
  r_2=r_1=rnew
  l=n(2,2)*log((2*(rnew*rnew)-2*rnew+1)/2)+
    n(2,1)*log(-(2*(rnew*rnew)-2*rnew-1)/2)+
    (n(3,1)+n(1,1))*log((rnew*rnew)-rnew+1)+
    (n(3,2)+n(1,2))*log(rnew-(rnew*rnew))
  r_5=r_6=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_B3_D1(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,2)+n(3,1)+2*n(2,2)+2*n(2,1)+n(1,2)+n(1,1))*rold+n(3,1)+n(1,2))/(2.0*(n_ind))
    }
  r_0=r_1=rnew
  r_2=r_3=abs(1.0-r_0)
  l=(n(3,1)+n(1,2))*log(rnew)+(n(3,2)+n(1,1))*log(1-rnew)-log(2.0)*n(2,2)-log(2.0)*n(2,1)
  r_4=r_5=r_6=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}
Rcpp::NumericVector rf_B3_D2(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(3,2)+n(3,1)+2*n(2,2)+2*n(2,1)+n(1,2)+n(1,1))*rold+n(3,1)+n(1,2))/(2.0*(n_ind))
    }
  r_0=r_2=rnew
  r_1=r_3=abs(1.0-r_0)
  l=(n(3,1)+n(1,2))*log(rnew)+(n(3,2)+n(1,1))*log(1-rnew)-log(2.0)*n(2,2)-log(2.0)*n(2,1)
  r_4=r_5=r_6=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}
Rcpp::NumericVector rf_C_C(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  //Likelihoods under h0: r=0.5
  l_0 = LN_75*(n(2,1)+n(1,1))-2*log(2)*(n(2,2)+n(1,2))
  //EM algorithm
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=-((n(2,1)+n(1,2)-2*n(1,1))*rold*rold+
	     (-2*n(2,1)-2*n(1,2)+4*n(1,1))*rold+
	     3*n(2,1)+3*n(1,2))/
	((n_ind)*(rold-2)*((rold*rold)-2*rold+3))
    }
  r_0=rnew
  l=n(1,1)*log(((rnew*rnew)-2*rnew+3)/3)+
    n(1,2)*log(-((rnew*rnew)-2*rnew)/3)+
    n(2,1)*log(2*rnew-(rnew*rnew))+
    2*n(2,2)*log(1-rnew)
  r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  rold=0, rnew=0.01	       
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(2,2)+n(2,1)+n(1,2)+n(1,1))*rold*rold*rold*rold+
	    (-2*n(2,2)-6*n(1,1))*rold*rold*rold+
	    (-3*n(2,1)-3*n(1,2)+6*n(1,1))*rold*rold+
	    (n(2,2)-2*n(2,1)-2*n(1,2)-5*n(1,1))*rold
	    -2*n(2,2))/(2.0*(n_ind)*(rold-2)*(rold+1)*((rold*rold)-rold+1))
    }
  r_2=r_1=rnew
  l=n(2,1)*log((rnew*rnew)-rnew+1)+
    n(1,2)*log(((rnew*rnew)-rnew+1)/3)+
    n(1,1)*log(-((rnew*rnew)-rnew-2)/3)+
    n(2,2)*log(rnew-(rnew*rnew))
  r_5=r_6=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  r_3=abs(1.0-r_0)  
  return(r)
}
Rcpp::NumericVector rf_C_D1(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(2,2)+n(2,1)+n(1,2)+n(1,1))*rold*rold*rold+
	    (-n(2,2)+n(1,2)-2*n(1,1))*rold*rold+
	    (-2*n(2,2)-3*n(2,1)-6*n(1,2)-3*n(1,1))*rold-2*n(2,1))/
	(2.0*(n_ind)*(rold-2)*(rold+1))
    }
  r_0=r_1=rnew
  r_2=r_3=abs(1.0-r_0)
  l=n(1,2)*log((rnew+1)/3)+n(2,1)*log(rnew)+n(1,1)*log(-(rnew-2)/3)+n(2,2)*log(1-rnew)
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}
Rcpp::NumericVector rf_C_D2(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=((n(2,2)+n(2,1)+n(1,2)+n(1,1))*rold*rold*rold+
	    (-n(2,2)+n(1,2)-2*n(1,1))*rold*rold+
	    (-2*n(2,2)-3*n(2,1)-6*n(1,2)-3*n(1,1))*rold-2*n(2,1))/
	(2.0*(n_ind)*(rold-2)*(rold+1))
    }
  r_0=r_2=rnew
  r_1=r_3=abs(1.0-r_0)
  l=n(1,2)*log((rnew+1)/3)+n(2,1)*log(rnew)+n(1,1)*log(-(rnew-2)/3)+n(2,2)*log(1-rnew)
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}
Rcpp::NumericVector rf_D1_D1(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(n(2,2)*rold+n(2,1)*rold+n(1,2)*rold+n(1,1)*rold+n(2,1)+n(1,2))/
	(2.0*(n_ind))
    }
  r_0=r_1=rnew
  r_2=r_3=abs(1.0-r_0)
  l=(n(2,1)+n(1,2))*log(rnew)+(n(2,2)+n(1,1))*log(1-rnew)
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}


Rcpp::NumericVector rf_D2_D2(Rcpp::NumericMatrix n,
			     int n_ind,
			     int mis)
{
  NumericVector r_8
  double l, l_0, rnew, rold
  /*Likelihoods under h0: r=0.5#
  l_0 = -log(2)*(n_ind)
  /*EM algorithm#
  rold=0
  rnew=0.01
  while(abs(rold-rnew) > TOL)
    {
      rold=rnew
      rnew=(n(2,2)*rold+n(2,1)*rold+n(1,2)*rold+n(1,1)*rold+n(2,1)+n(1,2))/
	(2.0*(n_ind))
    }
  r_0=r_2=rnew
  r_1=r_3=abs(1.0-r_0)
  l=(n(2,1)+n(1,2))*log(rnew)+(n(2,2)+n(1,1))*log(1-rnew)
  r_5=r_6=r_4=r_7=(l-l_0)/log(10.0) //transforming to base 10 logarithm
  return(r)
}

